"use client";

import "./globals.css";
import React, { useState, useEffect } from "react";
import { Loader } from "./(components)";
import { Card } from "./(components)";
import { FormField } from "./(components)";
import Link from "next/link";
import Logo from "@/assets/Logo";
import { useAppContext } from "@/context/page";
import { useRouter } from "next/navigation";
import Navbar from "./(components)/Navbar";
import {
  SignOutButton,
  SignedOut,
  SignedIn,
  SignInButton,
  RedirectToSignIn,
  useAuth
} from "@clerk/nextjs";
const RenderCards = ({ data, title }) => {
  if (data?.length > 0) {
    return data.map((post) => <Card key={post._id} {...post} />);
  }

  return (
    <h2 className="mt-5 font-bold text-[#6469ff] text-xl uppercase">{title}</h2>
  );
};

function Home() {
  const {isSignedIn} = useAuth();
  const router = useRouter();
  const {
    loading,
    setLoading,
    logIn,
    setLogIn,
    signUp,
    setSignUp,
    searchText,
    setSearchText,
    allPosts,
    setAllPosts,
    searchTimeout,
    setSearchTimeout,
    searchedResults,
    setSearchedResults,
  } = useAppContext();

  const logOutHandler = () => {
    setLogIn(false);
    setSignUp(false);
  };

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);

      try {
        const response = await fetch("/api/post", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
        const result = await response.json();
        console.log(result)
        if (result.data != null) {
          
          setAllPosts(result.data.reverse());
        }
      } catch (error) {
        alert(error);
      } finally {
        setLoading(false);
      }
    };
    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  const createHandler = () => {
    if (logIn || signUp) {
      router.push("/generate");
    } else {
      router.push("/sign-in");
    }
  };
  return (
    <>
    <Navbar />
      <div className="hero min-h-96 bg-base-200 rounded-md">
        <div className="hero-content text-center">
          <div className="max-w-md">
            <h1 className="text-5xl font-bold ">Hello there</h1>
            <p className="py-6">
              Transform your ideas into captivating visuals instantly. Our
              AI-powered image generator lets you create professional-quality
              images with just a few clicks.
            </p>
            <Link href={isSignedIn ? "/dashboard" : "sign-in"}>
              <p className="btn btn-success  text-white drop-shadow-xl w-24">
                
                Create
              </p>
            </Link>
          </div>
        </div>
      </div>
      <section className="mt-10">
        <div>
          <h1 className="font-extrabold text-[#222328] text-[32px]">
            The Community Showcase
          </h1>
          <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">
            Browse through a collection of imaginative and visually stunning
            images generated by DALL-E AI
          </p>
        </div>

        <div className="mt-16">
          <FormField
            labelName="Search posts"
            type="text"
            name="text"
            placeholder="Search posts"
            value={searchText}
            handleChange={handleSearchChange}
          />
        </div>

        <div className="mt-20">
          {loading ? (
            <div className="flex justify-center items-center">
              <Loader />
            </div>
          ) : (
            <>
              {searchText && (
                <h2 className="font-medium text-[#666e75] text-xl mb-3">
                  Showing Resuls for{" "}
                  <span className="text-[#222328]">{searchText}</span>:
                </h2>
              )}
              <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3 mb-10">
                {searchText ? (
                  <RenderCards
                    data={searchedResults}
                    title="No Search Results Found"
                  />
                ) : (
                  <RenderCards data={allPosts} title="No Posts Yet" />
                )}
              </div>
            </>
          )}
        </div>
      </section>
    </>
  );
}

export default Home;
